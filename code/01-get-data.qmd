---
title: "01-get-data"
author: "Sarah Tanja"
date: "4/11/2023"
output: md_document
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(
  echo = TRUE,         # Display code chunks
  eval = FALSE,         # Evaluate code chunks
  warning = FALSE,     # Hide warnings
  message = FALSE,     # Hide messages
  fig.width = 6,       # Set plot width in inches
  fig.height = 4,      # Set plot height in inches
  fig.align = "center" # Align plots to the center
)
```


prereqs :

-   sequence data files are deposited on NCBI

-   operating within RStudio on a Unix OS (Roberts Lab Raven server) with lots of drive space! These fastq files are really big so you don't want to download them onto your local computer

## Install Packages

```{r install-packages, eval=TRUE, cache=TRUE}

if ("knitr" %in% rownames(installed.packages()) == 'FALSE') BiocManager::install("knitr") 
if ("tidyverse" %in% rownames(installed.packages()) == 'FALSE') install.packages('tidyverse')
if ("kableExtra" %in% rownames(installed.packages()) == 'FALSE') install.packages('kableExtra')
if ("pheatmap" %in% rownames(installed.packages()) == 'FALSE') install.packages('pheatmap') 
if ("RColorBrewer" %in% rownames(installed.packages()) == 'FALSE') install.packages('RColorBrewer') 
if ("data.table" %in% rownames(installed.packages()) == 'FALSE') install.packages('data.table') 
if ("DT" %in% rownames(installed.packages()) == 'FALSE') install.packages('DT')
if ("Biostrings" %in% rownames(installed.packages()) == 'FALSE') install.packages('Biostrings') 
if ("BiocManager" %in% rownames(installed.packages()) == 'FALSE') install.packages('BiocManager') 
if ("DESeq2" %in% rownames(installed.packages()) == 'FALSE') BiocManager::install('DESeq2')
if ("SRAdb" %in% rownames(installed.packages()) == 'FALSE') BiocManager::install("SRAdb")
 
```

## Load packages

```{r load-packages, cache=TRUE}
library(SRAdb)
library(tidyverse)
```


# Get TagSeq FASTQ files from National Center for Biotechnology Information (NCBI) Sequence Read Archive (SRA)

::: callout-info
Checkout some background info on [The Sequence Read Archive (SRA)](https://linsalrob.github.io/ComputationalGenomicsManual/Databases/SRA.html#:~:text=A%20Study%20(SRP)%20has%20one,want%20to%20download%20from%20NCBI.) and the [SRA factsheet](https://www.ncbi.nlm.nih.gov/core/assets/sra/files/Factsheet_SRA.pdf)
:::


First we want to get an idea of the files we are downloading and the samples that generated the data. We will start by looking at the metadata for the samples.

## Get sample metadata

```{r , engine=bash}
# navigate to data directory
cd ../data

# download metadata from the git repo into the data directory
curl -O https://raw.githubusercontent.com/AHuffmyer/EarlyLifeHistory_Energetics/master/Mcap2020/Data/TagSeq/Sample_Info.csv  

```

```{r}
#pull data into R and rename it metadata 
metadata <- read_csv("../data/Sample_Info.csv")
```

Check file integrity (metadata in R vs. original file on Git repo) with `md5sum`

::: callout-info
[Learn How to Generate and Verify Files with MD5 Checksum in Linux](https://www.tecmint.com/generate-verify-check-files-md5-checksum-linux/)
:::

```{r, engine='bash'}
cd ../data
md5sum Sample_Info.csv
```

```{r, engine='bash'}
curl https://raw.githubusercontent.com/AHuffmyer/EarlyLifeHistory_Energetics/master/Mcap2020/Data/TagSeq/Sample_Info.csv | md5sum
```
::: callout-caution
md5sum only verifies/works with the file content rather than the file name.
:::

```{r}
#look at the metadata
head(metadata)
```

There are 39 samples (rows) with 8 metadata columns in this tibble dataset (AH1 - AH39). These samples are *Montipora capitata* coral taken at different life-stages (denoted by column names `time-stage` and `code` ), and RNA extracted and sequenced using Tag-Seq.

[![M. capitata development diagram by A. Huffmyer](https://user-images.githubusercontent.com/32178010/211181816-cf21abb7-7038-4f86-9aca-3ca326a958ce.png)](https://github.com/AHuffmyer/EarlyLifeHistory_Energetics)

## Select a sub-sample of files

To make things easier and faster, we're going to compare 2 life-history groups, with an n=4 for each group. In this case, let's compare 4 Embryos (an early stage) to 4 Attached Recruits (a later stage). This will represent 4 control to 4 pae-temp.

::: callout-warning
In this script, I am going to use these samples as 'fake-data' and pretend that they represent the experiment that I conducted (but don't have sequence data files for ... yet) Once I get my sequence files I will swap my files for the ones I've borrowed. 
:::


### Use SRA Run Selector to make a .txt file list of Run (SRR) numbers

> *"Results are called runs (SRR). Runs comprise the data gathered for a sample or sample bundle and refer to a defining experiment."*

First, we need to obtain RNAseq files from NCBI from the project [PRJNA900235](https://www.ncbi.nlm.nih.gov/bioproject/?term=PRJNA900235). In order to do this we need a list of SRR numbers that identify the specific sequence files for RNAseq. Go to the [SRA Run Selector](https://www.ncbi.nlm.nih.gov/Traces/study/?query_key=9&WebEnv=MCID_64358c3e49f6486f57b185c1&o=acc_s%3Aa) for BioProject 900235 and select the RNAseq files of interest.

![SRA run selector, downloading 8 fastq files (4 Embryo, 4 Attached Recruits)](images/sra-run-selector.png){fig-align="center"}

Select the files of interest, click 'Accession List' and the list of file run ID's will be downloaded in a text file named `SRR_Acc_list.txt` , upload this list into the `data` folder.

## Navigate to or create the directory where you will download the fastq files

```{r, engine='bash'}
# move to large data hard-drive 
cd /home/shared/8TB_HDD_01
# make a new directory named 'mcap', short for Montipora capitata
mkdir mcap
```

# Download the fastq files

Roberts Lab Resources Github [issue#1569](https://github.com/RobertsLab/resources/issues/1569) thread

Using `sratoolkit.3.0.2-ubuntu64` which is already downloaded in `/home/shared` folder

::: callout-caution
The following code will take some time, run it and go take a wee break
:::

```{r, engine='bash', cache=TRUE}
/home/shared/sratoolkit.3.0.2-ubuntu64/bin/./fasterq-dump \
--outdir /home/shared/8TB_HDD_01/mcap \
--progress \
SRR22293447 \
SRR22293448 \
SRR22293449 \
SRR22293450 \
SRR22293451 \
SRR22293452 \
SRR22293453 \
SRR22293454
```

Absolute path to fastq files in raven:

`/home/shared/8TB_HDD_01/mcap/`

Relative path to fastq files in raven:

`cd ../../../../../8TB_HDD_01/mcap/`

Check that the fastq files are downloaded:
```{r, engine='bash'}
pwd
cd ../../../../../8TB_HDD_01/mcap
pwd
ls
```

The fastq files have been downloaded!

# Download Annotated Reference Genes for *Montipora capitata*
<https://github.com/urol-e5/deep-dive>

<http://cyanophora.rutgers.edu/montipora/>

Nucleotide Coding Sequence (CDS)
<http://cyanophora.rutgers.edu/montipora/Montipora_capitata_HIv3.genes.cds.fna.gz>

 Downloading Reference

This code grabs the *Montipora capitata* fasta file (rna.fna) of genes.

```{r, engine='bash'}
# change to work in data directory
cd ../data
# download the rna.fna file to data directory from the gannet server
curl -O http://cyanophora.rutgers.edu/montipora/Montipora_capitata_HIv3.genes.cds.fna.gz
```

```{r, engine='bash'}
# check sum
cd ../data
md5sum Montipora_capitata_HIv3.genes.cds.fna
```
# Running kallisto

[kallisto](https://pachterlab.github.io/kallisto/) is a software that can be downloaded and unzipped into a `programs` directory outside of the repo.

> Kallisto is a pseudo-aligner, it does not need a genome to align to! It uses the sequences in the dataset to create it's own 'reference'

In our case, it is already installed on *raven* (`/home/shared/kallisto/kallisto`), and can be checked by running the `version` command as below:

```{r, engine='bash'}
/home/shared/kallisto/kallisto version
```
In the next code chunk we create the index file which **insert what the index file is for here**.

Creating the index file can take some time.

This code is indexing the file `rna.fna` while also renaming it as `mcap_rna.index`. `/home/shared/kallisto/kallisto` is the absolute path to the kallisto program from within the *raven* server, while the lines after the `index` command indicate where to get the data from (the `rna.fna` file) and where to write the file to.

```{r, engine='bash'}
/home/shared/kallisto/kallisto \
index -i \
../data/mcap_rna.index \
../data/Montipora_capitata_HIv3.genes.cds.fna
```

The next chunk performs the following steps:

-   creates a subdirectory `kallisto_01` in the `output` folder using `mkdir`
```{r, engine='bash'}
cd ../
mkdir output/kallisto_01
```

-   Uses the `find` utility to search for all files in the `/home/shared/8TB_HDD_01/mcap/` directory that match the pattern `*.fastq`.
-   Uses the `basename` command to extract the base filename of each file (i.e., the filename without the directory path), and removes the suffix `.fastq`.
-   Runs the kallisto `quant` command on each input file, with the following options:
-   `-i ../data/mcap_rna.index`: Use the kallisto index file located at `../data/mcap_rna.index`.
-   `-o ../output/kallisto_01/{}`: Write the output files to a directory called `../output/kallisto_01/` with a subdirectory named after the base filename of the input file (the {} is a placeholder for the base filename).
-   `-t 40`: Use 40 threads for the computation.
-   `--single -l 100 -s 10`: Specify that the input file contains single-end reads (--single), with an average read length of 100 (-l 100) and a standard deviation of 10 (-s 10).
-   The input file to process is specified using the {} placeholder, which is replaced by the base filename from the previous step.

```{r, engine='bash'}
find /home/shared/8TB_HDD_01/mcap/*.fastq \
| xargs basename -s .fastq | xargs -I{} /home/shared/kallisto/kallisto \
quant -i ../data/mcap_rna.index \
-o ../output/kallisto_01/{} \
-t 40 \
--single -l 100 -s 10 /home/shared/8TB_HDD_01/mcap/{}.fastq
```


