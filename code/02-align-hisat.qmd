---
title: "02-align-hisat"
author: "Sarah Tanja"
date: "`r format(Sys.time(), '%d %B, %Y')`" 
editor: visual
format:
  gfm: default
  html:
    df-print: paged
    toc: true
    smooth-scroll: true
    link-external-icon: true
    link-external-newwindow: true
    code-fold: show
    code-tools: true
    code-copy: true
    highlight-style: arrow
    code-overflow: wrap
    theme:
      light: sandstone
      dark: vapor
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE, eval = FALSE, warning = FALSE, message = FALSE)
```
## Overview


- sample sequence files located at absolute path `/home/shared/8TB_HDD_01/mcap/` 
- reference genome V3 files located at `../data/`


Look at the GFF (generic feature format) genomic annotation files and the FASTA genome file
```{r, engine='bash'}
cd ../data
tail -n 10 Montipora_capitata_HIv3.genes.gff3
tail -n 10 Montipora_capitata_HIv3.genes_fixed.gff3
tail -n 10 Montipora_capitata_HIv3.assembly.fasta
```

## Build an index file from the reference genome with HISAT2

::: callout-info title="ChatGPT Info on 'Indexing with HISAT2'"
An index file built from a genome is a data structure that enables fast searching and retrieval of information from the genome. Here we use `HISAT2` to break down the genome into smaller fragments and build an index file that stores the location and sequence of these fragments. This index file is created using a reference genome as a template.

HISAT2 (Hierarchical Indexing for Spliced Alignment of Transcripts 2) is a popular RNA-seq aligner that uses a type of index file called a Hierarchical Graph FM Index (HGFM).

The HGFM index is an extension of the FM-index data structure that is used in many other aligners such as Bowtie, BWA, and HISAT. The HGFM index builds on the FM-index by adding a hierarchical structure that allows for more efficient searching of splice junctions in RNA-seq data.

In HISAT2, the HGFM index is constructed from a reference genome and a gene annotation file, which together define the locations of splice junctions. The HGFM index stores a hierarchical graph of the reference genome that includes both the exonic and intronic regions, along with the splice junctions between them. This allows HISAT2 to align RNA-seq reads across splice junctions with high sensitivity and accuracy.

Overall, the HGFM index used by HISAT2 is optimized for aligning RNA-seq reads, which have unique challenges compared to genomic DNA sequencing. By incorporating splice junction information into the index, HISAT2 can accurately align RNA-seq reads to the genome and help identify gene expression and alternative splicing events.
:::

When using HISAT2's hisat2-build command to build an index from a genome, the input file should be a FASTA file containing the reference genome sequence. in this case, `Montipora_capitata_HIv3.assembly.fasta`. The `-f` option soecifies the input is a fasta file (which can come in the fasta, fna, or fa file extension format. We then title and create an index `Mcapv3_assembly.index`  which is stored into the output folder.
```{r, engine='bash'}
/home/shared/hisat2-2.2.1/hisat2-build \
-f ../data/Montipora_capitata_HIv3.assembly.fasta \
../output/Mcapv3_assembly.index
```

Or should I use the cds.fna file to build the index?
CDS coding sequences .fna denotes FASTA Nucleotides file...
Build index with cds.fna as well... 
```{r, engine='bash'}
/home/shared/hisat2-2.2.1/hisat2-build \
-f ../data/Montipora_capitata_HIv3.genes.cds.fna \
../output/Mcapv3_cds.index
```

# Perform Alignment to Index (making SAM files)

```
```{r, engine='bash'}
hisat2 -x path/to/hisat2_index/genome\
-U path/to/read1.fastq\
-S output.sam\
--threads num_threads
```
```

- specify the path to the single-end fastq file with the -U option

```{r, engine='bash'}
# Set input and output directories
input_dir=/home/shared/8TB_HDD_01/mcap
output_dir=../output

# Set Hisat2 options
hisat2_options="-x /home/shared/8TB_HDD_02/stanja/sarahtanja/sarahtanja-coralRNA/output/Mcapv3_assembly.index --threads 7"

# Loop through fastq files in input directory
for f in ${input_dir}/*; do
    # Get base filename
    base=$(basename ${f} .fastq)
    
    # Align with Hisat2
    /home/shared/hisat2-2.2.1/hisat2 \
    ${hisat2_options} \
    -U ${f} \
    -S ${output_dir}/${base}.sam \
    
done

```

OR Align using stringtie? I can't pick apart this code yet to customize it for my file directory...

```{r, engine='bash'}
# This script exports alignments as bam files
# sorts the bam file because Stringtie takes a sorted file for input (--dta)
array=($(ls clean*)) # call the clean sequences - make an array to align
for i in ${array[@]}; do
        sample_name=`echo $i| awk -F [.] '{print $2}'`
        
	hisat2 -p 8 --dta -x Mcapv3 -U ${i} -S ${sample_name}.sam
        samtools sort -@ 8 -o ${sample_name}.bam ${sample_name}.sam
    		echo "${i} bam-ified!"
        rm ${sample_name}.sam # removes the sam file because it is no longer needed
```

# Align RNA-seq reads using HISAT2




# Convert SAM file to sorted BAM file

samtools view -bS output.sam \| samtools sort -o output_sorted.bam

```{bash}
/home/shared/samtools-1.12/samtools \
view -bS ../output/Mcap.sam | \
/home/shared/samtools-1.12/samtools sort \
-o ../output/output_sorted.bam
```

## Or Use cloud computing?

## Connect to Hyak-Mox

![](images/mox-hyak.png)

-   In a unix `Terminal` type "`ssh stanja@mox.hyak.uw.edu`"

-   Enter UW NetID Password

-   Use Duo Mobile App to Push login approval

## Make a directory

Once logged into mox, navigate to `/gscratch/scrubbed/your-username`.

`cd /gscratch/scrubbed/stanja`

If the dir is not there you shoud create it. For every job you submit I recommend working within a directory.

`mkdir hisat`

## Generate a shell script

Create a shell script in your code directory named hisat-job.sh with contents:

```{r}
#!/bin/bash
## Job Name
#SBATCH --job-name=assign4
## Allocation Definition
#SBATCH --account=srlab
#SBATCH --partition=srlab
## Resources
## Nodes
#SBATCH --nodes=1
## Walltime (days-hours:minutes:seconds format)
#SBATCH --time=01-08:00:00
## Memory per node
#SBATCH --mem=100G
#SBATCH --mail-type=ALL
#SBATCH --mail-user=stanja@uw.edu
## Specify the working directory for this job
#SBATCH --chdir=/gscratch/scrubbed/stanja/assign_04

# for rsync
# run the following in the Rterminal, while connected to mox:
 rsync -avz assignments/code/04-* stanja@mox.hyak.uw.edu:/gscratch/scrubbed/stanja/assign_04

# for scp
# run the following in the Rterminal, while connected to mox:
# scp assignments/code/04-* stanja@mox.hyak.uw.edu:/gscratch/scrubbed/stanja/assign_04

# type the following to schedule the job
# sbatch 04-job-sh

# Then on mox, inside the assign_04 directory you will type”

# sbatch 04-job-sh to schedule the job.

# Once done you should have a couple of new files in the directory.

# You will want to check them to see if everything worked and then move the output back to your repo…

# rsync -avz stanja@mox.hyak.uw.edu:/gscratch/scrubbed/stanja/assign_04/ 

#run a python script you wrote!
module load intel-python3_2017

python 04-hello.py

# run blastx just to get manual
/gscratch/srlab/programs/ncbi-blast-2.10.1+/bin/blastx -help

#a few bash commands
pwd 

whoami

echo "yeah! I did it!!!!!!!!!!"

#this writes out  tofile
echo "yeah! I did it!!!!!!!!!!" > text.file
```

## rsync

run the following in the Rterminal, while connected to mox:

`rsync -avz code/hisat* stanja@mox.hyak.uw.edu:/gscratch/scrubbed/stanja/hisat`

## scp

run the following in the Rterminal, while connected to mox:

`scp assignments/code/04-* stanja@mox.hyak.uw.edu:/gscratch/scrubbed/stanja/assign_04`

```{r}
#!/bin/bash
## Hisat Test
#SBATCH --job-name=hisattest
## Allocation Definition
#SBATCH --account=srlab
#SBATCH --partition=srlab
## Resources
## Nodes
#SBATCH --nodes=1
## Walltime (days-hours:minutes:seconds format)
#SBATCH --time=01-08:00:00
## Memory per node
#SBATCH --mem=100G
#SBATCH --mail-type=ALL
#SBATCH --mail-user=stanja@uw.edu
## Specify the working directory for this job
#SBATCH --chdir=/gscratch/scrubbed/stanja/assign_04

# load modules needed
module load HISAT2/2.2.1-foss-2019b
module load SAMtools/1.9-foss-2018b

#unzip reference genome
#gunzip Montipora_capitata_HIv3.assembly.fasta.gz

# index the reference genome for Montipora capitata output index to working directory
hisat2-build -f /home/shared/8TB_HDD_02/sarahtanja/sarahtanja-coralRNA/data/Montipora_capitata_HIv3.assembly.fasta ./Mcapitata_ref_v3 # called the reference genome (scaffolds)
echo "Referece genome indexed. Starting alignment" $(date)

# This script exports alignments as bam files
# sorts the bam file because Stringtie takes a sorted file for input (--dta)
# removes the sam file because it is no longer needed
array=($(ls clean*)) # call the clean sequences - make an array to align
for i in ${array[@]}; do
        sample_name=`echo $i| awk -F [.] '{print $2}'`
	hisat2 -p 8 --dta -x Mcapitata_ref_v3 -U ${i} -S ${sample_name}.sam
        samtools sort -@ 8 -o ${sample_name}.bam ${sample_name}.sam
    		echo "${i} bam-ified!"
        rm ${sample_name}.sam
done
```
