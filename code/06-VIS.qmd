---
title: "Step 6: Visualize the Top Differentially Expressed Genes and their Functions"
subtitle: "Using the table of annotated differentially expressed genes **(generated in step 5)**, make some insightful data visualizations to understand the differing key biological processes between coral embryos and coral recruits"
author: "Sarah Tanja"
date: "`r format(Sys.time(), '%d %B, %Y')`"
format:
  html:
    df-print: paged
    toc: true
    toc-location: left
    smooth-scroll: true
    link-external-icon: true
    link-external-newwindow: true
    code-fold: false
    code-tools: true
    code-copy: true
    highlight-style: breeze
    code-overflow: wrap
    theme: minty
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(
  echo = TRUE,         # Display code chunks
  eval = TRUE,        # Evaluate code chunks
  warning = FALSE,     # Hide warnings
  message = FALSE,     # Hide messages
  fig.width = 6,       # Set plot width in inches
  fig.height = 4,      # Set plot height in inches
  fig.align = "center" # Align plots to the center
)
```

### Install Packages

```{r install packages, filename='r'}
if ("tidyverse" %in% rownames(installed.packages()) == 'FALSE') install.packages('tidyverse')
if ("ggplot2" %in% rownames(installed.packages()) == 'FALSE') install.packages('ggplot2')
if ("DESeq2" %in% rownames(installed.packages()) == 'FALSE') BiocManager::install('DESeq2')
if ("kableExtra" %in% rownames(installed.packages()) == 'FALSE') install.packages('kableExtra')
```

### Load Libraries

```{r load libraries, filename='r'}
library(tidyverse)
library(ggplot2)
library(DESeq2)
library(kableExtra)
```

### Read in Data

```{r, filename='r'}
annote_DEG <- read.delim(file = "../output/annote_DEGlist.tab", sep = " ", header = TRUE)
head(annote_DEG)
```






## Plotting Visualizations

```{r}
vsd <- vst(annote_DEG_sig, blind = FALSE)
pca <- plotPCA(vsd, intgroup = "condition")
pca

ggsave("../figs/pca_go.png", plot = pca, width = 8, height = 4, dpi = 600)
```






































### Create Dataframe

Here the code creates a `data.frame` named `deseq2.colData` containing information about the experimental conditions (embryos & recruits). It uses the column data dataframe named `deseq2.colData` to create a `DESeqDataSet` object using the `DESeqDataSetFromMatrix` function from the `DESeq2` package.

```{r, filename = 'r'}
# make a dataframe of 4 embryos and 4 recruits
deseq2.colData <- data.frame(condition=factor(c(rep("embryos", 4), rep("recruits", 4))), 
                             type=factor(rep("single-read", 8)))

# set row names to match the column names in the count matrix
rownames(deseq2.colData) <- colnames(data)

# DESeqDataSet object created using the `DESeqDataSetFromMatrix` function
deseq2.dds <- DESeqDataSetFromMatrix(countData = countmatrix,
                                     colData = deseq2.colData, 
                                     design = ~ condition)
```

### Negative Binomial: DESeq2 Results

The `DESeqDataSet` object, named `deseq.dds`, is then passed to the `DESeq()` function to fit a negative binomial model and estimate dispersions.

```{r, filename='r'}
deseq2.dds <- DESeq(deseq2.dds)
deseq2.res <- results(deseq2.dds)
deseq2.res <- deseq2.res[order(rownames(deseq2.res)), ]
dim(deseq2.res)
summary(deseq2.res)
# deseq2.res will be used in step 6.. is there a way to save this and read it in, rather than coming back and re-running this code? 

```

This code chunk subsets the deseq2.res data frame, selecting the rows where both of the following conditions are satisfied: `!is.na(deseq2.res$padj)` adjusted p-value is not missing
`deseq2.res$padj <= 0.05` adjusted p-value is less than or equal to 0.05

In summary, the code selects rows from the deseq2.res data frame where the padj values are not missing and are less than or equal to 0.05. It then calculates the dimensions (number of rows and columns) of this subset, giving us the number of significantly differentially expressed genes between our comparative groups 'embryos' and 'recruits'

```{r}
deseq2.sig.res <- (deseq2.res[!is.na(deseq2.res$padj) & deseq2.res$padj <= 0.05, ])

head(deseq2.sig.res)

# calculate the dimensions of the resulting subset. The dim() function returns a vector with two elements: the number of rows and the number of columns in the subset.
dim(deseq2.res[!is.na(deseq2.res$padj) & deseq2.res$padj <= 0.05, ])
```

::: callout-important
*Results:* Of the 54,384 rows (genes), 5,736 of them were significantly differentially expressed (p \<= 0.05) between *M. capitata* embryos and recruits.
:::


```{r, filename='r', cache=TRUE}
# Select top 20 differentially expressed genes
deseq2.res <- results(deseq2.dds)
res_ordered <- deseq2.res[order(deseq2.res$padj), ]
#create object that we will reference later
top_genes <- row.names(res_ordered)[1:20] 
```

```{r, filename = 'r', cache=TRUE}
#| column: margin

knitr::kable(
  top_genes
)

```


Next in order to merge the annotated blast table with the counts data we will need to transform the counts matrix into a data frame so that we can use the merge() function.
```{r, filename='r'}
#extract counts and normalizes them and then we put it all in a data frame 
counts <- counts(deseq2.dds, normalized = TRUE)
countsdf <- as.data.frame(counts)
countsdf$access_num <- row.names(countsdf) #new column
countsdf <- countsdf[ , c(5, 1:4)] #puts accession col in front
```

Take the row names of the `countmatrix` and make them into a new column. 
```{r}
countmatrix$gene_ID <- row.names(countmatrix) # adds the gene name into data frame as new column called gene_ID
rownames(countmatrix) <- countmatrix$X # renames all the rows to 1-n instead of the gene name
```

Relocate the `gene_ID` column back to the first column
```{r}
countmatrix %>% 
  relocate(gene_ID, .before= SRR22293447) # relocate gene_ID to the first column
```


Merge annotated DEG and countmatrix frame by an inner join so that we can just label genes that exist in the countsdf data frame. Note that there will be duplicate protein entries in this new merged data frame that got annotated the same in BLASTing. This is normal and so we are just going to get rid duplicates so that we are actually able to visualize whats going on.

```{r, filename='r'}
# merge the annote_DEG and countmatrix table together
top_annote <- merge(countmatrix, annote_DEG, by = "gene_ID", all = FALSE) #won't work unless they are both data frames

# checking for duplicates
head(which(duplicated(top_annote))) 
```
```{r}
#eliminate duplicate accession numbers
top_annote <- distinct(top_annote)

#checking if there are any duplicates still, should be 0
head(which(duplicated(top_annote))) 
```

```{r}
head(top_annote)
```

